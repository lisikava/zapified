{
  "discovered_urls": [
    "http://localhost:5000/sitemap.xml",
    "http://localhost:5000/admin",
    "http://localhost:5000/search?q=ZAP",
    "http://localhost:5000",
    "http://localhost:5000/reflect",
    "http://localhost:5000/reflect?input=ZAP",
    "http://localhost:5000/file?file=ZAP",
    "http://localhost:5000/file",
    "http://localhost:5000/",
    "http://localhost:5000/robots.txt",
    "http://localhost:5000/login",
    "http://localhost:5000/search"
  ],
  "alerts": [
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 16,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "16",
      "inputVector": "",
      "url": "http://localhost:5000/reflect",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "0",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 17,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "17",
      "inputVector": "",
      "url": "http://localhost:5000/search",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "1",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 25,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "25",
      "inputVector": "",
      "url": "http://localhost:5000/reflect?input=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "2",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 1,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "1",
      "inputVector": "",
      "url": "http://localhost:5000/",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "3",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 8,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "8",
      "inputVector": "",
      "url": "http://localhost:5000",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "4",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 28,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "28",
      "inputVector": "",
      "url": "http://localhost:5000/search?q=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "5",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 7,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "7",
      "inputVector": "",
      "url": "http://localhost:5000/sitemap.xml",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "6",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 26,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "26",
      "inputVector": "",
      "url": "http://localhost:5000/file?file=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "7",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 10,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "10",
      "inputVector": "",
      "url": "http://localhost:5000/robots.txt",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "9",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 18,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "18",
      "inputVector": "",
      "url": "http://localhost:5000/file",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "10",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10020",
      "cweid": "1021",
      "confidence": "Medium",
      "sourceMessageId": 19,
      "wascid": "15",
      "description": "The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.",
      "messageId": "19",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-1021": "https://cwe.mitre.org/data/definitions/1021.html",
        "WSTG-v42-CLNT-09": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
      "solution": "Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.\nIf you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's \"frame-ancestors\" directive.",
      "alert": "Missing Anti-clickjacking Header",
      "param": "x-frame-options",
      "attack": "",
      "name": "Missing Anti-clickjacking Header",
      "risk": "Medium",
      "id": "11",
      "alertRef": "10020-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "POST",
      "evidence": "Set-Cookie: session",
      "pluginId": "10054",
      "cweid": "1275",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "13",
      "description": "A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.",
      "messageId": "27",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "POLICY_QA_STD": "",
        "WSTG-v42-SESS-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
        "POLICY_PENTEST": "",
        "CWE-1275": "https://cwe.mitre.org/data/definitions/1275.html",
        "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site",
      "solution": "Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.",
      "alert": "Cookie without SameSite Attribute",
      "param": "session",
      "attack": "",
      "name": "Cookie without SameSite Attribute",
      "risk": "Low",
      "id": "12",
      "alertRef": "10054-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 18,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "18",
      "inputVector": "",
      "url": "http://localhost:5000/file",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "13",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 26,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "26",
      "inputVector": "",
      "url": "http://localhost:5000/file?file=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "14",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 9,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "9",
      "inputVector": "",
      "url": "http://localhost:5000/",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "15",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 16,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "16",
      "inputVector": "",
      "url": "http://localhost:5000/reflect",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "16",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 28,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "28",
      "inputVector": "",
      "url": "http://localhost:5000/search?q=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "17",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 25,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "25",
      "inputVector": "",
      "url": "http://localhost:5000/reflect?input=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "18",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 26,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "26",
      "inputVector": "",
      "url": "http://localhost:5000/file?file=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "20",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 10,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "10",
      "inputVector": "",
      "url": "http://localhost:5000/robots.txt",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "21",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 7,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "7",
      "inputVector": "",
      "url": "http://localhost:5000/sitemap.xml",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "22",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 20,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "20",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "23",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 17,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "17",
      "inputVector": "",
      "url": "http://localhost:5000/search",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "24",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 9,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "9",
      "inputVector": "",
      "url": "http://localhost:5000/",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "25",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 16,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "16",
      "inputVector": "",
      "url": "http://localhost:5000/reflect",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "26",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 18,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "18",
      "inputVector": "",
      "url": "http://localhost:5000/file",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "27",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "POST",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 27,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "27",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "28",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 8,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "8",
      "inputVector": "",
      "url": "http://localhost:5000",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "29",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 17,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "17",
      "inputVector": "",
      "url": "http://localhost:5000/search",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "30",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10038",
      "cweid": "693",
      "confidence": "High",
      "sourceMessageId": 19,
      "wascid": "15",
      "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.",
      "messageId": "19",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy\nhttps://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\nhttps://www.w3.org/TR/CSP/\nhttps://w3c.github.io/webappsec-csp/\nhttps://web.dev/articles/csp\nhttps://caniuse.com/#feat=contentsecuritypolicy\nhttps://content-security-policy.com/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.",
      "alert": "Content Security Policy (CSP) Header Not Set",
      "param": "",
      "attack": "",
      "name": "Content Security Policy (CSP) Header Not Set",
      "risk": "Medium",
      "id": "31",
      "alertRef": "10038-1"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 26,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "26",
      "inputVector": "",
      "url": "http://localhost:5000/file?file=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "32",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 25,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "25",
      "inputVector": "",
      "url": "http://localhost:5000/reflect?input=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "33",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 28,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "28",
      "inputVector": "",
      "url": "http://localhost:5000/search?q=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "35",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 19,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "19",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "36",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 17,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "17",
      "inputVector": "",
      "url": "http://localhost:5000/search",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "37",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "",
      "method": "GET",
      "evidence": "Werkzeug/3.1.3 Python/3.11.13",
      "pluginId": "10036",
      "cweid": "497",
      "confidence": "High",
      "sourceMessageId": 8,
      "wascid": "13",
      "description": "The web/application server is leaking version information via the \"Server\" HTTP response header. Access to such information may facilitate attackers identifying other vulnerabilities your web/application server is subject to.",
      "messageId": "8",
      "inputVector": "",
      "url": "http://localhost:5000",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html",
        "WSTG-v42-INFO-02": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
        "CWE-497": "https://cwe.mitre.org/data/definitions/497.html"
      },
      "reference": "https://httpd.apache.org/docs/current/mod/core.html#servertokens\nhttps://learn.microsoft.com/en-us/previous-versions/msp-n-p/ff648552(v=pandp.10)\nhttps://www.troyhunt.com/shhh-dont-let-your-response-headers/",
      "solution": "Ensure that your web server, application server, load balancer, etc. is configured to suppress the \"Server\" header or provide generic details.",
      "alert": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "param": "",
      "attack": "",
      "name": "Server Leaks Version Information via \"Server\" HTTP Response Header Field",
      "risk": "Low",
      "id": "38",
      "alertRef": "10036"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 18,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "18",
      "inputVector": "",
      "url": "http://localhost:5000/file",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "39",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 16,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "16",
      "inputVector": "",
      "url": "http://localhost:5000/reflect",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "40",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 9,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "9",
      "inputVector": "",
      "url": "http://localhost:5000/",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "41",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "userParam=username\nuserValue=ZAP\npasswordParam=password\nreferer=http://localhost:5000/login",
      "method": "POST",
      "evidence": "password",
      "pluginId": "10111",
      "cweid": "-1",
      "confidence": "High",
      "sourceMessageId": 27,
      "wascid": "-1",
      "description": "The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to \"Auto-Detect\" then this rule will change the authentication to match the request identified.",
      "messageId": "27",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {},
      "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/",
      "solution": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
      "alert": "Authentication Request Identified",
      "param": "username",
      "attack": "",
      "name": "Authentication Request Identified",
      "risk": "Informational",
      "id": "42",
      "alertRef": "10111"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 8,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "8",
      "inputVector": "",
      "url": "http://localhost:5000",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "43",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 19,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "19",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "44",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 28,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "28",
      "inputVector": "",
      "url": "http://localhost:5000/search?q=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "45",
      "alertRef": "10021"
    },
    {
      "sourceid": "3",
      "other": "cookie:session",
      "method": "POST",
      "evidence": "session",
      "pluginId": "10112",
      "cweid": "-1",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "-1",
      "description": "The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to \"Auto-Detect\" then this rule will change the session management to use the tokens identified.",
      "messageId": "27",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {},
      "reference": "https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id",
      "solution": "This is an informational alert rather than a vulnerability and so there is nothing to fix.",
      "alert": "Session Management Response Identified",
      "param": "session",
      "attack": "",
      "name": "Session Management Response Identified",
      "risk": "Informational",
      "id": "46",
      "alertRef": "10112"
    },
    {
      "sourceid": "3",
      "other": "This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.\nAt \"High\" threshold this scan rule will not alert on client or server error responses.",
      "method": "GET",
      "evidence": "",
      "pluginId": "10021",
      "cweid": "693",
      "confidence": "Medium",
      "sourceMessageId": 25,
      "wascid": "15",
      "description": "The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.",
      "messageId": "25",
      "inputVector": "",
      "url": "http://localhost:5000/reflect?input=ZAP",
      "tags": {
        "OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "POLICY_QA_STD": "",
        "POLICY_PENTEST": "",
        "CWE-693": "https://cwe.mitre.org/data/definitions/693.html",
        "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"
      },
      "reference": "https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)\nhttps://owasp.org/www-community/Security_Headers",
      "solution": "Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.\nIf possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.",
      "alert": "X-Content-Type-Options Header Missing",
      "param": "x-content-type-options",
      "attack": "",
      "name": "X-Content-Type-Options Header Missing",
      "risk": "Low",
      "id": "48",
      "alertRef": "10021"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "root:x:0:0",
      "pluginId": "6",
      "cweid": "22",
      "confidence": "Medium",
      "sourceMessageId": 26,
      "wascid": "33",
      "description": "The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.\n\nMost web sites restrict user access to a specific portion of the file-system, typically called the \"web document root\" or \"CGI root\" directory. These directories contain the files intended for user access and the executable necessary to drive web application functionality. To access files or execute commands anywhere on the file-system, Path Traversal attacks will utilize the ability of special-characters sequences.\n\nThe most basic Path Traversal attack uses the \"../\" special-character sequence to alter the resource location requested in the URL. Although most popular web servers will prevent this technique from escaping the web document root, alternate encodings of the \"../\" sequence may help bypass the security filters. These method variations include valid and invalid Unicode-encoding (\"..%u2216\" or \"..%c0%af\") of the forward slash character, backslash characters (\"..\\\") on Windows-based servers, URL encoded characters \"%2e%2e%2f\"), and double URL encoding (\"..%255c\") of the backslash character.\n\nEven if the web server properly restricts Path Traversal attempts in the URL path, a web application itself may still be vulnerable due to improper handling of user-supplied input. This is a common problem of web applications that use template mechanisms or load static text from files. In variations of the attack, the original URL parameter value is substituted with the file name of one of the web application's dynamic scripts. Consequently, the results can reveal source code because the file is interpreted as text instead of an executable script. These techniques often employ additional special characters such as the dot (\".\") to reveal the listing of the current working directory, or \"%00\" NULL characters in order to bypass rudimentary file extension checks.",
      "messageId": "45",
      "inputVector": "querystring",
      "url": "http://localhost:5000/file?file=%2Fetc%2Fpasswd",
      "tags": {
        "OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "POLICY_SEQUENCE": "",
        "CWE-22": "https://cwe.mitre.org/data/definitions/22.html",
        "WSTG-v42-ATHZ-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://owasp.org/www-community/attacks/Path_Traversal\nhttps://cwe.mitre.org/data/definitions/22.html",
      "solution": "Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nFor filenames, use stringent allow lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses, and exclude directory separators such as \"/\". Use an allow list of allowable file extensions.\n\nWarning: if you attempt to cleanse your data, then do so that the end result is not in the form that can be dangerous. A sanitizing mechanism can remove characters such as '.' and ';' which may be required for some exploits. An attacker can try to fool the sanitizing mechanism into \"cleaning\" data into a dangerous form. Suppose the attacker injects a '.' inside a filename (e.g. \"sensi.tiveFile\") and the sanitizing mechanism removes the character resulting in the valid filename, \"sensitiveFile\". If the input data are now assumed to be safe, then the file may be compromised. \n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allow list schemes by introducing dangerous inputs after they have been checked.\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links.\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by your software.\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows you to specify restrictions on file operations.\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n",
      "alert": "Path Traversal",
      "param": "file",
      "attack": "/etc/passwd",
      "name": "Path Traversal",
      "risk": "High",
      "id": "49",
      "alertRef": "6-2"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "<scrIpt>alert(1);</scRipt>",
      "pluginId": "40012",
      "cweid": "79",
      "confidence": "Medium",
      "sourceMessageId": 26,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "256",
      "inputVector": "querystring",
      "url": "http://localhost:5000/file?file=%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E",
      "tags": {
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "POLICY_PENTEST": "",
        "WSTG-v42-INPV-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html",
        "POLICY_DEV_CICD": "",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (Reflected)",
      "param": "file",
      "attack": "<scrIpt>alert(1);</scRipt>",
      "name": "Cross Site Scripting (Reflected)",
      "risk": "High",
      "id": "50",
      "alertRef": "40012"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "</div><scrIpt>alert(1);</scRipt><div>",
      "pluginId": "40012",
      "cweid": "79",
      "confidence": "Medium",
      "sourceMessageId": 25,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "258",
      "inputVector": "querystring",
      "url": "http://localhost:5000/reflect?input=%3C%2Fdiv%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Cdiv%3E",
      "tags": {
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "POLICY_PENTEST": "",
        "WSTG-v42-INPV-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html",
        "POLICY_DEV_CICD": "",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (Reflected)",
      "param": "input",
      "attack": "</div><scrIpt>alert(1);</scRipt><div>",
      "name": "Cross Site Scripting (Reflected)",
      "risk": "High",
      "id": "51",
      "alertRef": "40012"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "</h2><scrIpt>alert(1);</scRipt><h2>",
      "pluginId": "40012",
      "cweid": "79",
      "confidence": "Medium",
      "sourceMessageId": 28,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "260",
      "inputVector": "querystring",
      "url": "http://localhost:5000/search?q=%3C%2Fh2%3E%3CscrIpt%3Ealert%281%29%3B%3C%2FscRipt%3E%3Ch2%3E",
      "tags": {
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "POLICY_PENTEST": "",
        "WSTG-v42-INPV-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html",
        "POLICY_DEV_CICD": "",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (Reflected)",
      "param": "q",
      "attack": "</h2><scrIpt>alert(1);</scRipt><h2>",
      "name": "Cross Site Scripting (Reflected)",
      "risk": "High",
      "id": "52",
      "alertRef": "40012"
    },
    {
      "sourceid": "1",
      "other": "RDBMS [SQLite] likely, given error message regular expression [near \".+\": syntax error] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised.",
      "method": "GET",
      "evidence": "near \"(\": syntax error",
      "pluginId": "40018",
      "cweid": "89",
      "confidence": "Medium",
      "sourceMessageId": 28,
      "wascid": "19",
      "description": "SQL injection may be possible.",
      "messageId": "322",
      "inputVector": "querystring",
      "url": "http://localhost:5000/search?q=%27%28",
      "tags": {
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "CWE-89": "https://cwe.mitre.org/data/definitions/89.html",
        "WSTG-v42-INPV-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
        "POLICY_API": "",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "POLICY_PENTEST": "",
        "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html",
        "POLICY_DEV_CICD": "",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html",
      "solution": "Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.",
      "alert": "SQL Injection - SQLite",
      "param": "q",
      "attack": "'(",
      "name": "SQL Injection - SQLite",
      "risk": "High",
      "id": "53",
      "alertRef": "40018"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_1> as: %3Cscript%3Ealert(5397)%3C/script%3E\nAccess: http://localhost:5000/search?q=<PAYLOAD_1>\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 28,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "617",
      "inputVector": "querystring",
      "url": "http://localhost:5000/search?q=%3Cscript%3Ealert(5397)%3C/script%3E",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "q",
      "attack": "<script>alert(5397)</script>",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "54",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_1> as: %3Cscript%3Ealert(5397)%3C/script%3E\nAccess: http://localhost:5000/file?file=<PAYLOAD_1>\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 26,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "618",
      "inputVector": "querystring",
      "url": "http://localhost:5000/file?file=%3Cscript%3Ealert(5397)%3C/script%3E",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "file",
      "attack": "<script>alert(5397)</script>",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "55",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_0> as: #jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e\nAccess: http://localhost:5000/file<PAYLOAD_0>\nWrite to /html/body/form/input[1] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[1]\nAccess: http://localhost:5000/file<PAYLOAD_0>\nWrite to /html/body/form/input[2] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[2]\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 18,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "625",
      "inputVector": "",
      "url": "http://localhost:5000/file#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "",
      "attack": "#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "56",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_0> as: #jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e\nAccess: http://localhost:5000/reflect<PAYLOAD_0>\nWrite to /html/body/form/input[1] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[1]\nAccess: http://localhost:5000/reflect<PAYLOAD_0>\nWrite to /html/body/form/input[2] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[2]\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 16,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "626",
      "inputVector": "",
      "url": "http://localhost:5000/reflect#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "",
      "attack": "#jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert(5397) )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\\x3csVg/<sVg/oNloAd=alert(5397)//>\\x3e",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "57",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_1> as: %3Cscript%3Ealert(5397)%3C/script%3E\nAccess: http://localhost:5000/reflect?input=<PAYLOAD_1>\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 25,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "627",
      "inputVector": "querystring",
      "url": "http://localhost:5000/reflect?input=%3Cscript%3Ealert(5397)%3C/script%3E",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "input",
      "attack": "<script>alert(5397)</script>",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "58",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "The following steps were done to trigger the DOM XSS:\nWith <PAYLOAD_0> as: ?name=abc#<img src=\"random.gif\" onerror=alert(5397)>\nAccess: http://localhost:5000/search<PAYLOAD_0>\nWrite to /html/body/form/input[1] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[1]\nAccess: http://localhost:5000/search<PAYLOAD_0>\nWrite to /html/body/form/input[2] the value: <PAYLOAD_0>\nClick element: /html/body/form/input[2]\n",
      "method": "GET",
      "evidence": "",
      "pluginId": "40026",
      "cweid": "79",
      "confidence": "High",
      "sourceMessageId": 17,
      "wascid": "8",
      "description": "Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.\nWhen an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.\n\nThere are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.\nNon-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.\nPersistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.",
      "messageId": "641",
      "inputVector": "",
      "url": "http://localhost:5000/search?name=abc#<img src=\"random.gif\" onerror=alert(5397)>",
      "tags": {
        "WSTG-v42-CLNT-01": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
        "CWE-79": "https://cwe.mitre.org/data/definitions/79.html",
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "OWASP_2017_A07": "https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS).html"
      },
      "reference": "https://owasp.org/www-community/attacks/xss/\nhttps://cwe.mitre.org/data/definitions/79.html",
      "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nExamples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.\n\nPhases: Implementation; Architecture and Design\nUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nFor any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.\nConsult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.\n\nPhase: Architecture and Design\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\nPhase: Implementation\nFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.\n\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"\n\nEnsure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.\n\t",
      "alert": "Cross Site Scripting (DOM Based)",
      "param": "",
      "attack": "?name=abc#<img src=\"random.gif\" onerror=alert(5397)>",
      "name": "Cross Site Scripting (DOM Based)",
      "risk": "High",
      "id": "59",
      "alertRef": "40026"
    },
    {
      "sourceid": "1",
      "other": "Proof found at [http://localhost:5000/reflect?input=ZAP]\ncontent:\n[\n        <h2>Your input was:</h2>\n        <div>zj68099857zj</div>\n        <br><a href=\"/reflect\">Try again</a> | <a href=\"/\">Back to Home</a>\n        Server: Werkzeug/3.1.3 Python/3.11.13\r\nDate: Wed, 25 Jun 2025 06:33:57 GMT\r\nContent-Type: text/html; charset=utf-8\r\nContent-Length: 150\r\nConnection: close\r\n]",
      "method": "GET",
      "evidence": "",
      "pluginId": "90035",
      "cweid": "1336",
      "confidence": "High",
      "sourceMessageId": 25,
      "wascid": "20",
      "description": "When the user input is inserted in the template instead of being used as argument in rendering is evaluated by the template engine. Depending on the template engine it can lead to remote code execution.",
      "messageId": "1005",
      "inputVector": "querystring",
      "url": "http://localhost:5000/reflect?input=zj%7B%7B7201*9457%7D%7Dzj",
      "tags": {
        "POLICY_SEQUENCE": "",
        "OWASP_2021_A03": "https://owasp.org/Top10/A03_2021-Injection/",
        "POLICY_API": "",
        "POLICY_DEV_FULL": "",
        "POLICY_QA_STD": "",
        "POLICY_QA_FULL": "",
        "WSTG-v42-INPV-18": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection",
        "POLICY_PENTEST": "",
        "OWASP_2017_A01": "https://owasp.org/www-project-top-ten/2017/A1_2017-Injection.html",
        "CWE-1336": "https://cwe.mitre.org/data/definitions/1336.html",
        "POLICY_DEV_CICD": "",
        "POLICY_DEV_STD": ""
      },
      "reference": "https://portswigger.net/blog/server-side-template-injection",
      "solution": "Instead of inserting the user input in the template, use it as rendering argument.",
      "alert": "Server Side Template Injection",
      "param": "input",
      "attack": "zj{{7201*9457}}zj",
      "name": "Server Side Template Injection",
      "risk": "High",
      "id": "60",
      "alertRef": "90035"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1292",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "61",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1304",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "62",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1323",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "63",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1342",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "64",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1346",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "65",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1372",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "66",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1380",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "67",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1398",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "68",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1420",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "69",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1423",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "70",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1431",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "71",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1433",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "72",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1436",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "73",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1438",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "74",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1440",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "75",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1442",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "76",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1444",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "msnbot/1.1 (+http://search.msn.com/msnbot.htm)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "77",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1447",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "78",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1448",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "79",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "GET",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 20,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1450",
      "inputVector": "",
      "url": "http://localhost:5000/admin",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "80",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1452",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "81",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1454",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "82",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1456",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "83",
      "alertRef": "10104"
    },
    {
      "sourceid": "1",
      "other": "",
      "method": "POST",
      "evidence": "",
      "pluginId": "10104",
      "cweid": "0",
      "confidence": "Medium",
      "sourceMessageId": 27,
      "wascid": "0",
      "description": "Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.",
      "messageId": "1458",
      "inputVector": "",
      "url": "http://localhost:5000/login",
      "tags": {
        "POLICY_PENTEST": "",
        "CUSTOM_PAYLOADS": ""
      },
      "reference": "https://owasp.org/wstg",
      "solution": "",
      "alert": "User Agent Fuzzer",
      "param": "Header User-Agent",
      "attack": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
      "name": "User Agent Fuzzer",
      "risk": "Informational",
      "id": "84",
      "alertRef": "10104"
    }
  ],
  "scan_timestamp": "20250625_083358",
  "target_url": "http://localhost:5000"
}